#-----------------------------------------------------------
# Vivado v2020.2 (64-bit)
# SW Build 3064766 on Wed Nov 18 09:12:45 MST 2020
# IP Build 3064653 on Wed Nov 18 14:17:31 MST 2020
# Start of session at: Sat Sep 21 15:04:45 2024
# Process ID: 12828
# Current directory: C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.runs/synth_1
# Command line: vivado.exe -log fir_fault_tolerant.vds -product Vivado -mode batch -messageDb vivado.pb -notrace -source fir_fault_tolerant.tcl
# Log file: C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.runs/synth_1/fir_fault_tolerant.vds
# Journal file: C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.runs/synth_1\vivado.jou
#-----------------------------------------------------------
source fir_fault_tolerant.tcl -notrace
Command: synth_design -top fir_fault_tolerant -part xc7z010clg400-1 -mode Out_of_context
Starting synth_design
Attempting to get a license for feature 'Synthesis' and/or device 'xc7z010'
INFO: [Common 17-349] Got license for feature 'Synthesis' and/or device 'xc7z010'
INFO: [Device 21-403] Loading part xc7z010clg400-1
INFO: [Synth 8-7079] Multithreading enabled for synth_design using a maximum of 2 processes.
INFO: [Synth 8-7078] Launching helper process for spawning children vivado processes
INFO: [Synth 8-7075] Helper process launched with PID 11216
---------------------------------------------------------------------------------
Starting RTL Elaboration : Time (s): cpu = 00:00:07 ; elapsed = 00:00:07 . Memory (MB): peak = 1141.230 ; gain = 15.004
---------------------------------------------------------------------------------
INFO: [Synth 8-638] synthesizing module 'fir_fault_tolerant' [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/sources_1/new/fir_fault_tolerant.vhd:64]
	Parameter fir_ord bound to: 5 - type: integer 
	Parameter WIDTH bound to: 17 - type: integer 
	Parameter FIXED_POINT_POSITION bound to: 1 - type: integer 
	Parameter BRAM_SIZE bound to: 4096 - type: integer 
	Parameter NUM_OF_SPARE_PAIRS bound to: 4 - type: integer 
INFO: [Synth 8-638] synthesizing module 'fir_filtar_bram' [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/sources_1/new/fir_filtar_bram.vhd:61]
	Parameter fir_ord bound to: 5 - type: integer 
	Parameter WIDTH bound to: 17 - type: integer 
	Parameter FIXED_POINT_POSITION bound to: 1 - type: integer 
	Parameter BRAM_SIZE bound to: 4096 - type: integer 
INFO: [Synth 8-638] synthesizing module 'block_ram' [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/sources_1/new/block_ram.vhd:52]
	Parameter BRAM_SIZE bound to: 4096 - type: integer 
	Parameter WIDTH bound to: 17 - type: integer 
INFO: [Synth 8-256] done synthesizing module 'block_ram' (1#1) [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/sources_1/new/block_ram.vhd:52]
INFO: [Synth 8-638] synthesizing module 'fir_filtar' [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/sources_1/new/fir_filtar.vhd:52]
	Parameter fir_ord bound to: 5 - type: integer 
	Parameter WIDTH bound to: 17 - type: integer 
	Parameter FIXED_POINT_POSITION bound to: 1 - type: integer 
INFO: [Synth 8-638] synthesizing module 'mac' [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/sources_1/new/mac.vhd:47]
	Parameter WIDTH bound to: 17 - type: integer 
INFO: [Synth 8-256] done synthesizing module 'mac' (2#1) [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/sources_1/new/mac.vhd:47]
INFO: [Synth 8-256] done synthesizing module 'fir_filtar' (3#1) [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/sources_1/new/fir_filtar.vhd:52]
INFO: [Synth 8-256] done synthesizing module 'fir_filtar_bram' (4#1) [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/sources_1/new/fir_filtar_bram.vhd:61]
INFO: [Synth 8-638] synthesizing module 'voter_stanby_sparing' [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/sources_1/new/voter_standby_sparing.vhd:48]
	Parameter WIDTH bound to: 17 - type: integer 
	Parameter PAIR_OF_SPARES bound to: 4 - type: integer 
INFO: [Synth 8-256] done synthesizing module 'voter_stanby_sparing' (5#1) [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/sources_1/new/voter_standby_sparing.vhd:48]
INFO: [Synth 8-256] done synthesizing module 'fir_fault_tolerant' (6#1) [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/sources_1/new/fir_fault_tolerant.vhd:64]
---------------------------------------------------------------------------------
Finished RTL Elaboration : Time (s): cpu = 00:00:09 ; elapsed = 00:00:09 . Memory (MB): peak = 1194.727 ; gain = 68.500
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Handling Custom Attributes
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Handling Custom Attributes : Time (s): cpu = 00:00:09 ; elapsed = 00:00:09 . Memory (MB): peak = 1194.727 ; gain = 68.500
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished RTL Optimization Phase 1 : Time (s): cpu = 00:00:09 ; elapsed = 00:00:09 . Memory (MB): peak = 1194.727 ; gain = 68.500
---------------------------------------------------------------------------------
Netlist sorting complete. Time (s): cpu = 00:00:00 ; elapsed = 00:00:00.196 . Memory (MB): peak = 1194.727 ; gain = 0.000
INFO: [Project 1-570] Preparing netlist for logic optimization

Processing XDC Constraints
Initializing timing engine
Parsing XDC File [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/constrs_1/new/clock_constraint.xdc]
Finished Parsing XDC File [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/constrs_1/new/clock_constraint.xdc]
Completed Processing XDC Constraints

Netlist sorting complete. Time (s): cpu = 00:00:00 ; elapsed = 00:00:00.002 . Memory (MB): peak = 1317.020 ; gain = 0.000
INFO: [Project 1-111] Unisim Transformation Summary:
No Unisim elements were transformed.

Constraint Validation Runtime : Time (s): cpu = 00:00:00 ; elapsed = 00:00:00.141 . Memory (MB): peak = 1330.797 ; gain = 13.777
---------------------------------------------------------------------------------
Finished Constraint Validation : Time (s): cpu = 00:00:19 ; elapsed = 00:00:19 . Memory (MB): peak = 1330.797 ; gain = 204.570
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Loading Part and Timing Information
---------------------------------------------------------------------------------
Loading part: xc7z010clg400-1
---------------------------------------------------------------------------------
Finished Loading Part and Timing Information : Time (s): cpu = 00:00:19 ; elapsed = 00:00:19 . Memory (MB): peak = 1330.797 ; gain = 204.570
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Applying 'set_property' XDC Constraints
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished applying 'set_property' XDC Constraints : Time (s): cpu = 00:00:19 ; elapsed = 00:00:19 . Memory (MB): peak = 1330.797 ; gain = 204.570
---------------------------------------------------------------------------------
INFO: [Synth 8-802] inferred FSM for state register 'state_reg_reg' in module 'fir_filtar_bram'
---------------------------------------------------------------------------------------------------
                   State |                     New Encoding |                Previous Encoding 
---------------------------------------------------------------------------------------------------
                    idle |                               00 |                               00
           fir_working_1 |                               01 |                               01
           fir_working_2 |                               10 |                               10
           fir_working_3 |                               11 |                               11
---------------------------------------------------------------------------------------------------
INFO: [Synth 8-3354] encoded FSM with state register 'state_reg_reg' using encoding 'sequential' in module 'fir_filtar_bram'
WARNING: [Synth 8-327] inferring latch for variable 'fir_addr_i_nxt_reg' [C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.srcs/sources_1/new/fir_filtar_bram.vhd:129]
---------------------------------------------------------------------------------
Finished RTL Optimization Phase 2 : Time (s): cpu = 00:00:20 ; elapsed = 00:00:20 . Memory (MB): peak = 1330.797 ; gain = 204.570
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start RTL Component Statistics 
---------------------------------------------------------------------------------
Detailed RTL Component Info : 
+---Adders : 
	   2 Input   12 Bit       Adders := 16    
	   2 Input    2 Bit       Adders := 1     
+---Registers : 
	               17 Bit    Registers := 100   
	               12 Bit    Registers := 16    
	                2 Bit    Registers := 1     
+---RAMs : 
	              68K Bit	(4096 X 17 bit)          RAMs := 16    
+---Muxes : 
	   4 Input   17 Bit        Muxes := 1     
	   4 Input   12 Bit        Muxes := 16    
	   4 Input    2 Bit        Muxes := 8     
	   2 Input    2 Bit        Muxes := 32    
	   2 Input    1 Bit        Muxes := 40    
	   4 Input    1 Bit        Muxes := 24    
---------------------------------------------------------------------------------
Finished RTL Component Statistics 
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Part Resource Summary
---------------------------------------------------------------------------------
Part Resources:
DSPs: 80 (col length:40)
BRAMs: 120 (col length: RAMB18 40 RAMB36 20)
---------------------------------------------------------------------------------
Finished Part Resource Summary
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Cross Boundary and Area Optimization
---------------------------------------------------------------------------------
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
DSP Report: Generating DSP sum_reg_reg, operation Mode is: (C+(A2*B2)')'.
DSP Report: register b_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register a_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register sum_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: register m_reg_reg is absorbed into DSP sum_reg_reg.
DSP Report: operator sum_next is absorbed into DSP sum_reg_reg.
DSP Report: operator m_next is absorbed into DSP sum_reg_reg.
---------------------------------------------------------------------------------
Finished Cross Boundary and Area Optimization : Time (s): cpu = 00:00:25 ; elapsed = 00:00:26 . Memory (MB): peak = 1330.797 ; gain = 204.570
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start ROM, RAM, DSP, Shift Register and Retiming Reporting
---------------------------------------------------------------------------------

Block RAM: Preliminary Mapping	Report (see note below)
+-------------------+---------------------------------------------------------------------+------------------------+---+---+------------------------+---+---+------------------+--------+--------+
|Module Name        | RTL Object                                                          | PORT A (Depth x Width) | W | R | PORT B (Depth x Width) | W | R | Ports driving FF | RAMB18 | RAMB36 | 
+-------------------+---------------------------------------------------------------------+------------------------+---+---+------------------------+---+---+------------------+--------+--------+
|fir_fault_tolerant | redundant_fir_filtars[0].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[0].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[1].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[1].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[2].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[2].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[3].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[3].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[4].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[4].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[5].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[5].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[6].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[6].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[7].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[7].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
+-------------------+---------------------------------------------------------------------+------------------------+---+---+------------------------+---+---+------------------+--------+--------+

Note: The table above is a preliminary report that shows the Block RAMs at the current stage of the synthesis flow. Some Block RAMs may be reimplemented as non Block RAM primitives later in the synthesis flow. Multiple instantiated Block RAMs are reported only once. 

DSP: Preliminary Mapping	Report (see note below)
+------------+---------------+--------+--------+--------+--------+--------+------+------+------+------+-------+------+------+
|Module Name | DSP Mapping   | A Size | B Size | C Size | D Size | P Size | AREG | BREG | CREG | DREG | ADREG | MREG | PREG | 
+------------+---------------+--------+--------+--------+--------+--------+------+------+------+------+-------+------+------+
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
|mac         | (C+(A2*B2)')' | 17     | 17     | 34     | -      | 34     | 1    | 1    | 0    | -    | -     | 1    | 1    | 
+------------+---------------+--------+--------+--------+--------+--------+------+------+------+------+-------+------+------+

Note: The table above is a preliminary report that shows the DSPs inferred at the current stage of the synthesis flow. Some DSP may be reimplemented as non DSP primitives later in the synthesis flow. Multiple instantiated DSPs are reported only once.
---------------------------------------------------------------------------------
Finished ROM, RAM, DSP, Shift Register and Retiming Reporting
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Applying XDC Timing Constraints
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Applying XDC Timing Constraints : Time (s): cpu = 00:00:40 ; elapsed = 00:00:41 . Memory (MB): peak = 1339.965 ; gain = 213.738
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Timing Optimization
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Timing Optimization : Time (s): cpu = 00:00:41 ; elapsed = 00:00:42 . Memory (MB): peak = 1357.777 ; gain = 231.551
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start ROM, RAM, DSP, Shift Register and Retiming Reporting
---------------------------------------------------------------------------------

Block RAM: Final Mapping	Report
+-------------------+---------------------------------------------------------------------+------------------------+---+---+------------------------+---+---+------------------+--------+--------+
|Module Name        | RTL Object                                                          | PORT A (Depth x Width) | W | R | PORT B (Depth x Width) | W | R | Ports driving FF | RAMB18 | RAMB36 | 
+-------------------+---------------------------------------------------------------------+------------------------+---+---+------------------------+---+---+------------------+--------+--------+
|fir_fault_tolerant | redundant_fir_filtars[0].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[0].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[1].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[1].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[2].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[2].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[3].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[3].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[4].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[4].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[5].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[5].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[6].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[6].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[7].uut_fir_filter/input_block_ram/memory_reg  | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
|fir_fault_tolerant | redundant_fir_filtars[7].uut_fir_filter/output_block_ram/memory_reg | 4 K x 17(READ_FIRST)   | W |   | 4 K x 17(WRITE_FIRST)  |   | R | Port A and B     | 0      | 2      | 
+-------------------+---------------------------------------------------------------------+------------------------+---+---+------------------------+---+---+------------------+--------+--------+

---------------------------------------------------------------------------------
Finished ROM, RAM, DSP, Shift Register and Retiming Reporting
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Technology Mapping
---------------------------------------------------------------------------------
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[0].uut_fir_filter/input_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[0].uut_fir_filter/input_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[0].uut_fir_filter/output_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[0].uut_fir_filter/output_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[1].uut_fir_filter/input_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[1].uut_fir_filter/input_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[1].uut_fir_filter/output_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[1].uut_fir_filter/output_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[2].uut_fir_filter/input_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[2].uut_fir_filter/input_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[2].uut_fir_filter/output_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[2].uut_fir_filter/output_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[3].uut_fir_filter/input_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[3].uut_fir_filter/input_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[3].uut_fir_filter/output_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[3].uut_fir_filter/output_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[4].uut_fir_filter/input_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[4].uut_fir_filter/input_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[4].uut_fir_filter/output_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[4].uut_fir_filter/output_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[5].uut_fir_filter/input_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[5].uut_fir_filter/input_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[5].uut_fir_filter/output_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[5].uut_fir_filter/output_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[6].uut_fir_filter/input_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[6].uut_fir_filter/input_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[6].uut_fir_filter/output_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[6].uut_fir_filter/output_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[7].uut_fir_filter/input_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[7].uut_fir_filter/input_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[7].uut_fir_filter/output_block_ram/memory_reg_0 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
INFO: [Synth 8-7052] The timing for the instance redundant_fir_filtars[7].uut_fir_filter/output_block_ram/memory_reg_1 (implemented as a Block RAM) might be sub-optimal as no optional output register could be merged into the ram block. Providing additional output register may help in improving timing.
---------------------------------------------------------------------------------
Finished Technology Mapping : Time (s): cpu = 00:00:42 ; elapsed = 00:00:43 . Memory (MB): peak = 1368.836 ; gain = 242.609
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start IO Insertion
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Flattening Before IO Insertion
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Flattening Before IO Insertion
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Final Netlist Cleanup
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Final Netlist Cleanup
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished IO Insertion : Time (s): cpu = 00:00:46 ; elapsed = 00:00:47 . Memory (MB): peak = 1380.441 ; gain = 254.215
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Renaming Generated Instances
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Renaming Generated Instances : Time (s): cpu = 00:00:46 ; elapsed = 00:00:47 . Memory (MB): peak = 1380.441 ; gain = 254.215
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Rebuilding User Hierarchy
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Rebuilding User Hierarchy : Time (s): cpu = 00:00:47 ; elapsed = 00:00:48 . Memory (MB): peak = 1380.441 ; gain = 254.215
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Renaming Generated Ports
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Renaming Generated Ports : Time (s): cpu = 00:00:47 ; elapsed = 00:00:48 . Memory (MB): peak = 1380.441 ; gain = 254.215
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Handling Custom Attributes
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Handling Custom Attributes : Time (s): cpu = 00:00:47 ; elapsed = 00:00:48 . Memory (MB): peak = 1380.500 ; gain = 254.273
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Renaming Generated Nets
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Finished Renaming Generated Nets : Time (s): cpu = 00:00:47 ; elapsed = 00:00:48 . Memory (MB): peak = 1380.500 ; gain = 254.273
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Start Writing Synthesis Report
---------------------------------------------------------------------------------

Report BlackBoxes: 
+-+--------------+----------+
| |BlackBox name |Instances |
+-+--------------+----------+
+-+--------------+----------+

Report Cell Usage: 
+------+---------+------+
|      |Cell     |Count |
+------+---------+------+
|1     |CARRY4   |    56|
|2     |DSP48E1  |    40|
|3     |LUT2     |   120|
|4     |LUT3     |   104|
|5     |LUT4     |    27|
|6     |LUT5     |     8|
|7     |LUT6     |    86|
|8     |RAMB36E1 |    32|
|9     |FDRE     |   363|
|10    |LD       |    96|
+------+---------+------+
---------------------------------------------------------------------------------
Finished Writing Synthesis Report : Time (s): cpu = 00:00:47 ; elapsed = 00:00:48 . Memory (MB): peak = 1380.500 ; gain = 254.273
---------------------------------------------------------------------------------
Synthesis finished with 0 errors, 0 critical warnings and 1 warnings.
Synthesis Optimization Runtime : Time (s): cpu = 00:00:34 ; elapsed = 00:00:44 . Memory (MB): peak = 1380.500 ; gain = 118.203
Synthesis Optimization Complete : Time (s): cpu = 00:00:47 ; elapsed = 00:00:48 . Memory (MB): peak = 1380.500 ; gain = 254.273
INFO: [Project 1-571] Translating synthesized netlist
Netlist sorting complete. Time (s): cpu = 00:00:00 ; elapsed = 00:00:00.117 . Memory (MB): peak = 1393.543 ; gain = 0.000
INFO: [Netlist 29-17] Analyzing 224 Unisim elements for replacement
INFO: [Netlist 29-28] Unisim Transformation completed in 0 CPU seconds
INFO: [Project 1-570] Preparing netlist for logic optimization
INFO: [Opt 31-138] Pushed 0 inverter(s) to 0 load pin(s).
Netlist sorting complete. Time (s): cpu = 00:00:00 ; elapsed = 00:00:00 . Memory (MB): peak = 1393.543 ; gain = 0.000
INFO: [Project 1-111] Unisim Transformation Summary:
  A total of 96 instances were transformed.
  LD => LDCE: 96 instances

INFO: [Common 17-83] Releasing license: Synthesis
60 Infos, 1 Warnings, 0 Critical Warnings and 0 Errors encountered.
synth_design completed successfully
synth_design: Time (s): cpu = 00:00:56 ; elapsed = 00:00:59 . Memory (MB): peak = 1393.543 ; gain = 267.316
INFO: [Common 17-1381] The checkpoint 'C:/Users/Dusan/Desktop/master_sve/GITHAB/DSONG/fir_standby_sparing/fir_filtar.runs/synth_1/fir_fault_tolerant.dcp' has been generated.
INFO: [runtcl-4] Executing : report_utilization -file fir_fault_tolerant_utilization_synth.rpt -pb fir_fault_tolerant_utilization_synth.pb
INFO: [Common 17-206] Exiting Vivado at Sat Sep 21 15:05:53 2024...
